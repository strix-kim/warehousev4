/**
 * üîÑ useAutoRefresh v2 - Best Practices –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
 * - –ù–µ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç v1)
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–Ω–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * - Graceful error handling
 * - Debounce –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
 * - Adaptive intervals –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { ref, onMounted, onUnmounted } from 'vue'
import { useLoadingStates } from './useLoadingStates'

export function useAutoRefresh(refreshFunction, intervalMinutes = 1, options = {}) {
  const {
    enableDebounce = true,
    debounceMs = 1000,
    pauseOnError = false,
    maxRetries = 3
  } = options
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ loading states
  const {
    isRefreshing,
    shouldShowRefreshIndicator,
    withRefreshing,
    setError
  } = useLoadingStates()
  const isAutoRefreshActive = ref(false)
  const lastRefreshTime = ref(null)
  const refreshInterval = ref(null)
  const currentTime = ref(new Date()) // –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const retryCount = ref(0)
  let debounceTimeout = null

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const startAutoRefresh = () => {
    if (refreshInterval.value) return // –£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ
    
    console.log(`üîÑ [AutoRefresh] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ ${intervalMinutes} –º–∏–Ω`)
    
    refreshInterval.value = setInterval(performRefresh, intervalMinutes * 60 * 1000)
    
    isAutoRefreshActive.value = true
    lastRefreshTime.value = new Date()
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const stopAutoRefresh = () => {
    if (refreshInterval.value) {
      clearInterval(refreshInterval.value)
      refreshInterval.value = null
      isAutoRefreshActive.value = false
      console.log('‚èπÔ∏è [AutoRefresh] –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    }
  }

  /**
   * –£–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
   */
  const performRefresh = async () => {
    if (isRefreshing.value) {
      console.log('üü° [AutoRefresh] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')
      return
    }

    try {
      await withRefreshing(async () => {
        console.log('üîÑ [AutoRefresh] –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...')
        await refreshFunction()
        lastRefreshTime.value = new Date()
        retryCount.value = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        console.log('‚úÖ [AutoRefresh] –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      })
    } catch (error) {
      retryCount.value++
      console.error(`‚ùå [AutoRefresh] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount.value}):`, error)
      
      // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (retryCount.value >= maxRetries && pauseOnError) {
        console.warn('‚è∏Ô∏è [AutoRefresh] –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫')
        stopAutoRefresh()
      }
    }
  }

  /**
   * –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å debounce)
   */
  const manualRefresh = async () => {
    if (enableDebounce && debounceTimeout) {
      clearTimeout(debounceTimeout)
    }

    const doRefresh = async () => {
      await performRefresh()
    }

    if (enableDebounce) {
      debounceTimeout = setTimeout(doRefresh, debounceMs)
    } else {
      await doRefresh()
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  const getTimeUntilNextRefresh = () => {
    if (!lastRefreshTime.value) return null
    
    const nextRefreshTime = new Date(lastRefreshTime.value.getTime() + (intervalMinutes * 60 * 1000))
    const now = new Date()
    const diffMs = nextRefreshTime.getTime() - now.getTime()
    
    if (diffMs <= 0) return 0
    return Math.ceil(diffMs / 1000) // –°–µ–∫—É–Ω–¥—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
  const timeInterval = ref(null)
  
  const startTimeTracking = () => {
    timeInterval.value = setInterval(() => {
      currentTime.value = new Date()
    }, 1000)
  }
  
  const stopTimeTracking = () => {
    if (timeInterval.value) {
      clearInterval(timeInterval.value)
      timeInterval.value = null
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  onMounted(() => {
    startAutoRefresh()
    startTimeTracking()
  })

  onUnmounted(() => {
    stopAutoRefresh()
    stopTimeTracking()
  })

  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    isAutoRefreshActive,
    lastRefreshTime,
    currentTime,
    
    // Loading states (–ù–ï —Å–∫—Ä—ã–≤–∞—é—Ç –∫–æ–Ω—Ç–µ–Ω—Ç!)
    isRefreshing,
    shouldShowRefreshIndicator,
    
    // –ú–µ—Ç–æ–¥—ã
    startAutoRefresh,
    stopAutoRefresh,
    manualRefresh,
    getTimeUntilNextRefresh,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    retryCount
  }
}
