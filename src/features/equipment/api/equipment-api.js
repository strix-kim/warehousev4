/**
 * Equipment API - EPR System
 * 
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase
 */

import { supabase } from '@/shared/api/supabase.js'

export const equipmentApi = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
   */
  async getEquipments({ 
    search = '',
    filters = {},
    page = 1, 
    limit = 30,
    sortBy = 'created_at',
    sortOrder = 'desc'
  } = {}) {
    try {
      let query = supabase
        .from('equipment')
        .select('*', { count: 'exact' })

      // –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—è–º
      if (search && search.trim()) {
        const searchTerm = search.trim()
        query = query.or(
          `brand.ilike.%${searchTerm}%,model.ilike.%${searchTerm}%,serialnumber.ilike.%${searchTerm}%`
        )
      }

      // –°–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.type && filters.type !== '') {
        query = query.eq('type', filters.type)
      }
      
      if (filters.subtype && filters.subtype !== '') {
        query = query.eq('subtype', filters.subtype)
      }
      
      if (filters.location && filters.location !== '') {
        query = query.eq('location', filters.location)
      }
      
      if (filters.availability && filters.availability !== '') {
        query = query.eq('availability', filters.availability)
      }

      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      query = query.order(sortBy, { ascending: sortOrder === 'asc' })

      // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è
      const offset = (page - 1) * limit
      query = query.range(offset, offset + limit - 1)

      const { data, error, count } = await query

      if (error) throw error

      console.log('üîç [API] –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ + —Ñ–∏–ª—å—Ç—Ä—ã:', {
        search: search || '–Ω–µ—Ç –ø–æ–∏—Å–∫–∞',
        filters: Object.keys(filters).length > 0 ? filters : '–Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤',
        found: count,
        page,
        loaded: data?.length
      })

      return {
        data: data || [],
        total: count || 0,
        page,
        pages: Math.ceil((count || 0) / limit),
        limit,
        hasMore: offset + limit < (count || 0),
        search: search || '',
        filters: filters || {}
      }
    } catch (error) {
      console.error('Equipment API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },



  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ ID
   */
  async getEquipment(id) {
    try {
      const { data, error } = await supabase
        .from('equipment')
        .select('*')
        .eq('id', id)
        .single()

      if (error) throw error

      return { data }
    } catch (error) {
      console.error('Equipment API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async createEquipment(equipmentData) {
    try {
      const { data, error } = await supabase
        .from('equipment')
        .insert([equipmentData])
        .select()
        .single()

      if (error) throw error

      return { data }
    } catch (error) {
      console.error('Equipment API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async updateEquipment(id, equipmentData) {
    try {
      const { data, error } = await supabase
        .from('equipment')
        .update(equipmentData)
        .eq('id', id)
        .select()
        .single()

      if (error) throw error

      return { data }
    } catch (error) {
      console.error('Equipment API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
   */
  async deleteEquipment(id) {
    try {
      const { error } = await supabase
        .from('equipment')
        .delete()
        .eq('id', id)

      if (error) throw error

      return { success: true }
    } catch (error) {
      console.error('Equipment API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },

  /**
   * –ü–æ–∏—Å–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async searchEquipments(query) {
    try {
      const { data, error } = await supabase
        .from('equipment')
        .select('*')
        .or(`brand.ilike.%${query}%,model.ilike.%${query}%,serial_number.ilike.%${query}%`)
        .limit(10)
        .order('created_at', { ascending: false })

      if (error) throw error

      return { data: data || [] }
    } catch (error) {
      console.error('Equipment search error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è')
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async getCategories() {
    try {
      const { data, error } = await supabase
        .from('equipment_categories')
        .select('*')
        .order('name')

      if (error) throw error

      return { data: data || [] }
    } catch (error) {
      console.error('Categories API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π')
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  getStatuses() {
    return [
      { value: 'available', label: '–î–æ—Å—Ç—É–ø–Ω–æ' },
      { value: 'in_use', label: '–í –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏' },
      { value: 'maintenance', label: '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏' },
      { value: 'retired', label: '–°–ø–∏—Å–∞–Ω–æ' }
    ]
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
   */
  async getLocations() {
    try {
      const { data, error } = await supabase
        .from('equipment_locations')
        .select('*')
        .order('name')

      if (error) throw error

      return { data: data || [] }
    } catch (error) {
      console.error('Locations API error:', error)
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π')
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –ø–æ–∏—Å–∫–∞
   */
  async getSearchSuggestions(query) {
    try {
      if (!query || query.length < 2) return []
      
      const searchTerm = query.trim().toLowerCase()
      const suggestions = []
      
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
      const { data: brands } = await supabase
        .from('equipment')
        .select('brand')
        .ilike('brand', `%${searchTerm}%`)
        .not('brand', 'is', null)
        .limit(5)
      
      if (brands) {
        const uniqueBrands = [...new Set(brands.map(item => item.brand).filter(Boolean))]
        uniqueBrands.forEach(brand => {
          suggestions.push({
            text: brand,
            type: 'brand'
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏
      const { data: models } = await supabase
        .from('equipment')
        .select('model')
        .ilike('model', `%${searchTerm}%`)
        .not('model', 'is', null)
        .limit(5)
      
      if (models) {
        const uniqueModels = [...new Set(models.map(item => item.model).filter(Boolean))]
        uniqueModels.forEach(model => {
          suggestions.push({
            text: model,
            type: 'model'
          })
        })
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
      const { data: serials } = await supabase
        .from('equipment')
        .select('serialnumber')
        .ilike('serialnumber', `%${searchTerm}%`)
        .not('serialnumber', 'is', null)
        .limit(3)
      
      if (serials) {
        const uniqueSerials = [...new Set(serials.map(item => item.serialnumber).filter(Boolean))]
        uniqueSerials.forEach(serial => {
          suggestions.push({
            text: serial,
            type: 'serialnumber'
          })
        })
      }
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ç–µ–∫—Å—Ç—É (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º —Ç–∏–ø–æ–≤)
      const uniqueSuggestions = []
      const seenTexts = new Set()
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É —Ç–∏–ø–æ–≤: brand > model > serialnumber
      const typePriority = { 'brand': 1, 'model': 2, 'serialnumber': 3 }
      suggestions.sort((a, b) => typePriority[a.type] - typePriority[b.type])
      
      suggestions.forEach(suggestion => {
        const normalizedText = suggestion.text.toLowerCase().trim()
        if (!seenTexts.has(normalizedText)) {
          seenTexts.add(normalizedText)
          uniqueSuggestions.push(suggestion)
        }
      })
      
      console.log('üîç [API] –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
        –≤—Å–µ–≥–æ: suggestions.length,
        —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: uniqueSuggestions.length,
        query: searchTerm
      })
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      return uniqueSuggestions.slice(0, 10)
      
    } catch (error) {
      console.error('Equipment API error:', error)
      return []
    }
  }
} 