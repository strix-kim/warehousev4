/**
 * Equipment Store - EPR System
 * 
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pinia –∏ UI Kit v2 –ø—Ä–∏–Ω—Ü–∏–ø—ã
 */

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { equipmentApi } from '../api/equipment-api.js'
import { getCategoryOptions, getSubcategoryOptions } from '../constants/categories.js'

export const useEquipmentStore = defineStore('equipment', () => {
  // State
  const equipments = ref([])
  const loading = ref(false)
  const error = ref(null)
  const total = ref(0)
  const currentPage = ref(1)
  const itemsPerPage = ref(30)
  const totalPages = ref(0)
  const hasMore = ref(false)
  const searchQuery = ref('')
  const filters = ref({
    type: null,        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    subtype: null,     // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è  
    status: null,      // –°—Ç–∞—Ç—É—Å
    location: null     // –õ–æ–∫–∞—Ü–∏—è
  })
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  const sortBy = ref('created_at')
  const sortOrder = ref('desc')

  // Getters
  const hasData = computed(() => equipments.value.length > 0)
  const isEmpty = computed(() => !loading.value && !error.value && !hasData.value)
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryOptions = computed(() => getCategoryOptions())
  const getSubcategoryOptionsMethod = (selectedCategory) => getSubcategoryOptions(selectedCategory)
  
  // ‚úÖ –°–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è, –ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã - –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≥–æ—Ç–æ–≤—ã–º–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
  // equipments.value —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  
  // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º (–≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ)
  const filteredEquipments = computed(() => equipments.value)
  const paginatedEquipments = computed(() => equipments.value)

  // Helper Methods - —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
  const resetPageAndReload = async () => {
    currentPage.value = 1
    await loadEquipments()
  }

  const reloadData = async () => {
    await loadEquipments()
  }

  // Actions
  const loadEquipments = async () => {
    loading.value = true
    error.value = null

    try {
      const response = await equipmentApi.getEquipments({
        search: searchQuery.value,
        filters: filters.value,
        page: currentPage.value,
        limit: itemsPerPage.value,
        sortBy: sortBy.value,
        sortOrder: sortOrder.value
      })
      
      equipments.value = response.data || []
      total.value = response.total || 0
      totalPages.value = response.pages || 0
      hasMore.value = response.hasMore || false
      
      console.log('‚úÖ [Store] –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ + —Ñ–∏–ª—å—Ç—Ä—ã + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è:', {
        search: response.search || '–Ω–µ—Ç –ø–æ–∏—Å–∫–∞',
        filters: Object.keys(response.filters).length > 0 ? response.filters : '–Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤',
        sortBy: sortBy.value,
        sortOrder: sortOrder.value,
        page: response.page,
        total: response.total,
        pages: response.pages,
        loaded: response.data?.length
      })
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
      console.error('Equipment load error:', err)
    } finally {
      loading.value = false
    }
  }

  const createEquipment = async (equipmentData) => {
    loading.value = true
    error.value = null

    try {
      const response = await equipmentApi.createEquipment(equipmentData)
      equipments.value.push(response.data)
      total.value++
      return response.data
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
      throw err
    } finally {
      loading.value = false
    }
  }

  const updateEquipment = async (id, equipmentData) => {
    loading.value = true
    error.value = null

    try {
      const response = await equipmentApi.updateEquipment(id, equipmentData)
      const index = equipments.value.findIndex(e => e.id === id)
      if (index !== -1) {
        equipments.value[index] = response.data
      }
      return response.data
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
      throw err
    } finally {
      loading.value = false
    }
  }

  const deleteEquipment = async (id) => {
    loading.value = true
    error.value = null

    try {
      await equipmentApi.deleteEquipment(id)
      equipments.value = equipments.value.filter(e => e.id !== id)
      total.value--
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
      throw err
    } finally {
      loading.value = false
    }
  }

  const setSearchQuery = async (query) => {
    searchQuery.value = query
    await resetPageAndReload() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper
  }

  const setFilters = async (newFilters) => {
    filters.value = { ...filters.value, ...newFilters }
    await resetPageAndReload() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper
  }

  const setPage = async (page) => {
    if (page >= 1 && page <= totalPages.value) {
      currentPage.value = page
      await reloadData() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper (–±–µ–∑ —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    }
  }

  const setItemsPerPage = async (items) => {
    itemsPerPage.value = items
    await resetPageAndReload() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper
  }

  const clearError = () => {
    error.value = null
  }

  const clearFilters = async () => {
    filters.value = {}
    await resetPageAndReload() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper
  }

  const setSorting = async (field, order = null) => {
    console.log('üîÑ [Store] setSorting called:', { field, order, currentSort: sortBy.value, currentOrder: sortOrder.value })
    
    // –ï—Å–ª–∏ order –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    if (order === null) {
      if (sortBy.value === field) {
        // –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ–º—É –∂–µ –ø–æ–ª—é, —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º: asc -> desc -> none -> asc
        if (sortOrder.value === 'asc') {
          sortOrder.value = 'desc'
        } else if (sortOrder.value === 'desc') {
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
          sortBy.value = 'created_at'
          sortOrder.value = 'desc'
        } else {
          sortOrder.value = 'asc'
        }
      } else {
        // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –ø–æ–ª–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å ascending
        sortBy.value = field
        sortOrder.value = 'asc'
      }
    } else {
      sortBy.value = field
      sortOrder.value = order
    }
    
    await resetPageAndReload() // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º helper
    
    console.log('üîÑ [Store] –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:', {
      sortBy: sortBy.value,
      sortOrder: sortOrder.value
    })
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞
  const getSearchSuggestions = async (query) => {
    if (!query || query.length < 2) return []
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤, –º–æ–¥–µ–ª–µ–π –∏ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
      const suggestions = await equipmentApi.getSearchSuggestions(query)
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è SearchInputV2 (—É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–ø–∏—Å–∞–Ω–∏—è)
      return suggestions.map(item => ({
        label: item.text,
        value: item.text,
        // –£–±–∏—Ä–∞–µ–º description —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        description: item.type === 'brand' ? '–ë—Ä–µ–Ω–¥' : 
                    item.type === 'model' ? '–ú–æ–¥–µ–ª—å' : '–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä',
        icon: item.type === 'brand' ? 'check-circle' : 
              item.type === 'model' ? 'package' : 'edit',
        // –£–±–∏—Ä–∞–µ–º meta —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø—Ä–∞–≤–∞
        meta: ''
      }))
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞:', error)
      return []
    }
  }

  return {
    // State
    equipments,
    loading,
    error,
    total,
    currentPage,
    itemsPerPage,
    totalPages,
    hasMore,
    searchQuery,
    filters,
    sortBy,
    sortOrder,

    // Getters
    hasData,
    isEmpty,
    filteredEquipments,
    paginatedEquipments,
    categoryOptions,
    getSubcategoryOptions: getSubcategoryOptionsMethod,

    // Helper Methods
    resetPageAndReload,
    reloadData,

    // Actions
    loadEquipments,
    createEquipment,
    updateEquipment,
    deleteEquipment,
    getSearchSuggestions,
    setSearchQuery,
    setFilters,
    setPage,
    setItemsPerPage,
    clearError,
    clearFilters,
    setSorting
  }
})