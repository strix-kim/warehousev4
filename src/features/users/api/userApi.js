// userApi.js
// –°–µ—Ä–≤–∏—Å –¥–ª—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users) —á–µ—Ä–µ–∑ Supabase.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∏ —Ö—É–∫–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.

import { supabase } from '@/shared/api/supabase'

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
export async function fetchUsers() {
  return await supabase.from('users').select('*')
}

/**
 * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @param {Array<string>} userIds - –º–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function fetchUsersByIds(userIds) {
  try {
    if (!userIds || userIds.length === 0) {
      console.log('üîç [API] –ù–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
      return { data: [], error: null }
    }

    console.log(`üîç [API] –ó–∞–≥—Ä—É–∂–∞–µ–º ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID:`, userIds)

    const { data, error } = await supabase
      .from('users')
      .select('*')
      .in('id', userIds)

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID:', error)
      return { data: [], error }
    }

    console.log(`‚úÖ [API] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID`)
    return { data: data || [], error: null }

  } catch (err) {
    console.error('‚ùå [API] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ fetchUsersByIds:', err)
    return { data: [], error: err }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
 * @param {string} id
 */
export async function fetchUserById(id) {
  return await supabase.from('users').select('*').eq('id', id).single()
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤/–∞–¥–º–∏–Ω–∫–∏)
 * @param {Object} user
 */
export async function addUser(user) {
  return await supabase.from('users').insert([user])
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} id
 * @param {Object} updates
 */
export async function updateUser(id, updates) {
  return await supabase.from('users').update(updates).eq('id', id)
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è admin)
 * @param {string} id
 */
export async function deleteUser(id) {
  return await supabase.from('users').delete().eq('id', id)
} 