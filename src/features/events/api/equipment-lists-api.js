/**
 * Equipment Lists API - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */

import { supabase } from '@/shared/api/supabase.js'

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @param {string} eventId - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<{data: Array, error: string|null}>}
 */
export async function fetchEquipmentListsByEventId(eventId) {
  try {
    console.log('üîç [API] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', eventId)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    const { data: lists, error } = await supabase
      .from('equipment_lists')
      .select(`
        id,
        name,
        type,
        description,
        equipment_ids,
        event_id,
        mount_point_id,
        metadata,
        created_at,
        updated_at,
        created_by,
        is_archived
      `)
      .eq('event_id', eventId)
      .eq('is_archived', false)
      .order('created_at', { ascending: false })

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    const listsWithEquipment = await Promise.all(
      (lists || []).map(async (list) => {
        if (!list.equipment_ids || list.equipment_ids.length === 0) {
          return {
            ...list,
            equipment_items: []
          }
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –ø–æ ID
        const { data: equipment, error: equipmentError } = await supabase
          .from('equipment')
          .select('id, brand, model, type, subtype, serialnumber, availability')
          .in('id', list.equipment_ids)

        if (equipmentError) {
          console.warn('‚ö†Ô∏è [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞:', list.id, equipmentError)
          return {
            ...list,
            equipment_items: []
          }
        }

        return {
          ...list,
          equipment_items: equipment || []
        }
      })
    )

    console.log('‚úÖ [API] –°–ø–∏—Å–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', listsWithEquipment?.length || 0)
    return { data: listsWithEquipment || [], error: null }

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    return { 
      data: [], 
      error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' 
    }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ ID
 * @param {string} listId - ID —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * @returns {Promise<{data: Object|null, error: string|null}>}
 */
export async function fetchEquipmentListById(listId) {
  try {
    console.log('üîç [API] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', listId)

    const { data: list, error } = await supabase
      .from('equipment_lists')
      .select(`
        id,
        name,
        type,
        description,
        equipment_ids,
        event_id,
        mount_point_id,
        metadata,
        created_at,
        updated_at,
        created_by,
        is_archived
      `)
      .eq('id', listId)
      .single()

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    let equipment_items = []
    if (list.equipment_ids && list.equipment_ids.length > 0) {
      const { data: equipment, error: equipmentError } = await supabase
        .from('equipment')
        .select('id, brand, model, type, subtype, serialnumber, availability')
        .in('id', list.equipment_ids)

      if (equipmentError) {
        console.warn('‚ö†Ô∏è [API] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞:', listId, equipmentError)
      } else {
        equipment_items = equipment || []
      }
    }

    const result = {
      ...list,
      equipment_items
    }

    console.log('‚úÖ [API] –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω:', result.name)
    return { data: result, error: null }

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    return { 
      data: null, 
      error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' 
    }
  }
}

/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * @param {Object} listData - –¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞
 * @returns {Promise<{data: Object|null, error: string|null}>}
 */
export async function createEquipmentList(listData) {
  try {
    console.log('üìù [API] –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', listData.name)

    const { data, error } = await supabase
      .from('equipment_lists')
      .insert([{
        name: listData.name,
        type: listData.type || 'custom',
        description: listData.description || '',
        equipment_ids: listData.equipment_ids || [],
        event_id: listData.event_id,
        mount_point_id: listData.mount_point_id || null,
        metadata: listData.metadata || {},
        created_by: listData.created_by,
        is_archived: false
      }])
      .select()
      .single()

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ [API] –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω:', data.id)
    return { data, error: null }

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    return { 
      data: null, 
      error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' 
    }
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * @param {string} listId - ID —Å–ø–∏—Å–∫–∞
 * @param {Object} updateData - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns {Promise<{data: Object|null, error: string|null}>}
 */
export async function updateEquipmentList(listId, updateData) {
  try {
    console.log('üìù [API] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', listId)

    const updateFields = {
      updated_at: new Date().toISOString()
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (updateData.name !== undefined) updateFields.name = updateData.name
    if (updateData.type !== undefined) updateFields.type = updateData.type
    if (updateData.description !== undefined) updateFields.description = updateData.description
    if (updateData.equipment_ids !== undefined) updateFields.equipment_ids = updateData.equipment_ids
    if (updateData.metadata !== undefined) updateFields.metadata = updateData.metadata
    if (updateData.is_archived !== undefined) updateFields.is_archived = updateData.is_archived

    const { data, error } = await supabase
      .from('equipment_lists')
      .update(updateFields)
      .eq('id', listId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ [API] –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω:', data.id)
    return { data, error: null }

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    return { 
      data: null, 
      error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' 
    }
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
 * @param {string} listId - ID —Å–ø–∏—Å–∫–∞
 * @returns {Promise<{success: boolean, error: string|null}>}
 */
export async function deleteEquipmentList(listId) {
  try {
    console.log('üóëÔ∏è [API] –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', listId)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ is_archived
    const { data, error } = await supabase
      .from('equipment_lists')
      .update({ 
        is_archived: true,
        updated_at: new Date().toISOString()
      })
      .eq('id', listId)
      .select()
      .single()

    if (error) {
      console.error('‚ùå [API] –û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
      throw error
    }

    console.log('‚úÖ [API] –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω:', listId)
    return { success: true, error: null }

  } catch (error) {
    console.error('‚ùå [API] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', error)
    return { 
      success: false, 
      error: error.message || '–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è' 
    }
  }
}
