/**
 * eventApi.js
 * API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ —á–µ—Ä–µ–∑ Supabase
 * 
 * –ü–æ–ª—è –∑–∞–ø–∏—Å–∏ events:
 * - id, name, organizer, location, description, technical_task
 * - photos, setup_date, start_date, end_date, teardown_date
 * - mount_points_count, responsible_engineers, created_at, is_archived
 * 
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ø–æ–ª–µ is_archived –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î
 */

import { supabase } from '@/shared/api/supabase'

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function fetchEvents() {
  try {
    const { data, error } = await supabase
      .from('events')
      .select('*')
      .order('created_at', { ascending: false })
    
    return { data: data || [], error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ fetchEvents:', error)
    return { data: [], error }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (is_archived = false)
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function fetchActiveEvents() {
  try {
    const { data, error } = await supabase
      .from('events')
      .select('*')
      .eq('is_archived', false)
      .order('created_at', { ascending: false })
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ—à–∏–±–∫–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ
    if (error && error.message?.includes('column "is_archived" does not exist')) {
      console.warn('‚ö†Ô∏è –ü–æ–ª–µ is_archived –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ.')
      return await fetchEvents()
    }
    
    return { data: data || [], error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ fetchActiveEvents:', error)
    // Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    return await fetchEvents()
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (is_archived = true)
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function fetchArchivedEvents() {
  try {
    const { data, error } = await supabase
      .from('events')
      .select('*')
      .eq('is_archived', true)
      .order('created_at', { ascending: false })
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ—à–∏–±–∫–∞), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (error && error.message?.includes('column "is_archived" does not exist')) {
      console.warn('‚ö†Ô∏è –ü–æ–ª–µ is_archived –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î. –ê—Ä—Ö–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.')
      return { data: [], error: null }
    }
    
    return { data: data || [], error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ fetchArchivedEvents:', error)
    return { data: [], error }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø–æ ID
 * @param {string} id - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<Object|null>} –æ–±—ä–µ–∫—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ null
 */
export async function fetchEventById(id) {
  try {
    const { data, error } = await supabase
      .from('events')
      .select('*')
      .eq('id', id)
      .single()
    
    if (error) {
      if (error.code === 'PGRST116') {
        throw new Error('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      }
      throw error
    }
    
    return data
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ fetchEventById:', error)
    throw error
  }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
 * @param {Object} eventData - –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<{data: Object, error: Object|null}>}
 */
export async function addEvent(eventData) {
  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ –ë–î)
    const newEvent = {
      name: eventData.name || '',
      organizer: eventData.organizer || '',
      location: eventData.location || '',
      description: eventData.description || '',
      technical_task: eventData.technical_task || '',
      photos: eventData.photos || [],
      setup_date: eventData.setup_date || null,
      start_date: eventData.start_date || null,
      end_date: eventData.end_date || null,
      teardown_date: eventData.teardown_date || null,
      mount_points_count: eventData.mount_points_count || 0,
      responsible_engineers: eventData.responsible_engineers || [],
      is_archived: eventData.is_archived ?? false,
      created_at: eventData.created_at || new Date().toISOString()
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–ª—è is_archived –∏ created_at –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ –ë–î
    }
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ PostgreSQL
    // PostgreSQL –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∏–ø–∞ date, —Ç–æ–ª—å–∫–æ null –∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã
    const dateFields = ['setup_date', 'start_date', 'end_date', 'teardown_date']
    dateFields.forEach(field => {
      if (newEvent[field] === '') {
        console.log(`üîß –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ null –¥–ª—è –ø–æ–ª—è ${field} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏`)
        newEvent[field] = null
      }
    })
    
    const { data, error } = await supabase
      .from('events')
      .insert([newEvent])
      .select()
    
    return { data: data?.[0] || null, error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ addEvent:', error)
    return { data: null, error }
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
 * @param {string} id - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @param {Object} updates - –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Promise<{data: Object, error: Object|null}>}
 */
export async function updateEvent(id, updates) {
  try {
    console.log('üîß updateEvent –≤—ã–∑–≤–∞–Ω —Å:', { id, updates })
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ –ë–î)
    const allowedFields = [
      'name', 'organizer', 'location', 'description', 'technical_task',
      'photos', 'setup_date', 'start_date', 'end_date', 'teardown_date',
      'mount_points_count', 'responsible_engineers', 'is_archived', 'created_at'
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–æ–ª—è is_archived –∏ created_at –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ –ë–î
    ]
    
    const filteredUpdates = Object.keys(updates)
      .filter(key => allowedFields.includes(key))
      .reduce((obj, key) => {
        obj[key] = updates[key]
        return obj
      }, {})
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –¥–∞—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ PostgreSQL
    // PostgreSQL –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ç–∏–ø–∞ date, —Ç–æ–ª—å–∫–æ null –∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã
    const dateFields = ['setup_date', 'start_date', 'end_date', 'teardown_date', 'created_at']
    dateFields.forEach(field => {
      if (filteredUpdates[field] === '') {
        console.log(`üîß –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ null –¥–ª—è –ø–æ–ª—è ${field}`)
        filteredUpdates[field] = null
      }
    })
    
    console.log('üîß –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', filteredUpdates)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(filteredUpdates).length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return { data: null, error: new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è') }
    }
    
    const { data, error } = await supabase
      .from('events')
      .update(filteredUpdates)
      .eq('id', id)
      .select()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      })
    } else {
      console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', data?.[0])
    }
    
    return { data: data?.[0] || null, error }
  } catch (error) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ updateEvent:', error)
    return { data: null, error }
  }
}

/**
 * –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ (is_archived = true) –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–≤—Å–µ–º
 * @param {string} id - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<{data: Object|null, error: Object|null}>}
 */
export async function deleteEvent(id) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ is_archived
    const { data, error } = await supabase
      .from('events')
      .update({ is_archived: true })
      .eq('id', id)
      .select()
    
    // –ï—Å–ª–∏ –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    if (error && error.message?.includes('column "is_archived" does not exist')) {
      console.warn('‚ö†Ô∏è –ü–æ–ª–µ is_archived –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ.')
      const deleteResult = await supabase
        .from('events')
        .delete()
        .eq('id', id)
      
      return { data: null, error: deleteResult.error }
    }
    
    return { data: data?.[0] || null, error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ deleteEvent:', error)
    return { data: null, error }
  }
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ –∞—Ä—Ö–∏–≤–∞ (is_archived = false)
 * @param {string} id - ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<{data: Object|null, error: Object|null}>}
 */
export async function restoreEvent(id) {
  try {
    const { data, error } = await supabase
      .from('events')
      .update({ is_archived: false })
      .eq('id', id)
      .select()
    
    return { data: data?.[0] || null, error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ restoreEvent:', error)
    return { data: null, error }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–µ –ë–î
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø–æ–ª–µ is_archived —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 */
export async function checkArchivingSupport() {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å is_archived
    const { error } = await supabase
      .from('events')
      .select('is_archived')
      .limit(1)
    
    return !error
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ checkArchivingSupport:', error)
    return false
  }
}

/**
 * –ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É
 * @param {string} query - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Array} fields - –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é name, organizer, location)
 * @param {boolean} includeArchived - –≤–∫–ª—é—á–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function searchEvents(query, fields = ['name', 'organizer', 'location'], includeArchived = true) {
  try {
    if (!query || query.trim() === '') {
      return includeArchived ? await fetchEvents() : await fetchActiveEvents()
    }
    
    let queryBuilder = supabase.from('events').select('*')
    
    // –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    const searchConditions = fields.map(field => `${field}.ilike.%${query}%`)
    queryBuilder = queryBuilder.or(searchConditions.join(','))
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!includeArchived) {
      const archivingSupported = await checkArchivingSupport()
      if (archivingSupported) {
        queryBuilder = queryBuilder.eq('is_archived', false)
      }
    }
    
    queryBuilder = queryBuilder.order('created_at', { ascending: false })
    
    const { data, error } = await queryBuilder
    
    return { data: data || [], error }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ searchEvents:', error)
    return { data: [], error }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
 * @returns {Promise<{data: Object, error: Object|null}>}
 */
export async function getEventsStats() {
  try {
    const archivingSupported = await checkArchivingSupport()
    
    if (archivingSupported) {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ/–∞—Ä—Ö–∏–≤–Ω—ã–µ
      const [activeResult, archivedResult] = await Promise.all([
        supabase.from('events').select('id', { count: 'exact' }).eq('is_archived', false),
        supabase.from('events').select('id', { count: 'exact' }).eq('is_archived', true)
      ])
      
      const stats = {
        total: (activeResult.count || 0) + (archivedResult.count || 0),
        active: activeResult.count || 0,
        archived: archivedResult.count || 0,
        archivingSupported: true
      }
      
      return { data: stats, error: null }
    } else {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
      const { count, error } = await supabase
        .from('events')
        .select('id', { count: 'exact' })
      
      const stats = {
        total: count || 0,
        active: count || 0,
        archived: 0,
        archivingSupported: false
      }
      
      return { data: stats, error }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ getEventsStats:', error)
    return { data: null, error }
  }
} 