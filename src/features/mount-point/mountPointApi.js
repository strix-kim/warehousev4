/**
 * Mount Point API - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–æ—á–∫–∞–º–∏ –º–æ–Ω—Ç–∞–∂–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∏ —Ö—É–∫–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ç–æ—á–∫–∞–º–∏ –º–æ–Ω—Ç–∞–∂–∞
 * –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import { supabase } from '@/shared/api/supabase'

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞ –ø–æ event_id —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
 * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
 * @returns {Promise<{data: Array, error: Object|null}>}
 */
export async function fetchMountPoints(eventId) {
  try {
    console.log('üîß fetchMountPoints –≤—ã–∑–≤–∞–Ω –¥–ª—è eventId:', eventId)
    
    if (!eventId) {
      throw new Error('Event ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }

    const { data, error } = await supabase
      .from('mount_points')
      .select('*')
      .eq('event_id', eventId)
      .order('name', { ascending: true })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –≤ fetchMountPoints:', error)
      return { data: [], error }
    }

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventId}`)
    return { data: data || [], error: null }
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ fetchMountPoints:', err)
    return { data: [], error: err }
  }
}

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * @param {Object} mountPointData - –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @returns {Promise<{data: Object|null, error: Object|null}>}
 */
export async function addMountPoint(mountPointData) {
  try {
    console.log('üîß addMountPoint –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏:', mountPointData)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const validation = validateMountPointData(mountPointData)
    if (validation.error) {
      throw new Error(validation.error)
    }

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const preparedData = {
      event_id: mountPointData.event_id,
      name: mountPointData.name?.trim(),
      location: mountPointData.location?.trim() || null,
      start_date: mountPointData.start_date || null,
      technical_duties: mountPointData.technical_duties || [],
      responsible_engineers: mountPointData.responsible_engineers || [],
      equipment_plan: mountPointData.equipment_plan || [],
      equipment_final: mountPointData.equipment_final || [],
      equipment_fact: mountPointData.equipment_fact || []
    }

    const { data, error } = await supabase
      .from('mount_points')
      .insert([preparedData])
      .select()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –≤ addMountPoint:', error)
      return { data: null, error }
    }

    console.log('‚úÖ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', data?.[0])
    return { data, error: null }
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ addMountPoint:', err)
    return { data: null, error: err }
  }
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * @param {string} id - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @param {Object} updates - –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Promise<{data: Object|null, error: Object|null}>}
 */
export async function updateMountPoint(id, updates) {
  try {
    console.log('üîß updateMountPoint –≤—ã–∑–≤–∞–Ω –¥–ª—è ID:', id, '—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:', updates)
    
    if (!id) {
      throw new Error('ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const allowedFields = [
      'name', 'location', 'start_date', 'technical_duties', 'responsible_engineers', 
      'equipment_plan', 'equipment_final', 'equipment_fact'
    ]
    
    const filteredUpdates = Object.keys(updates)
      .filter(key => allowedFields.includes(key))
      .reduce((obj, key) => {
        obj[key] = updates[key]
        return obj
      }, {})

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (Object.keys(filteredUpdates).length === 0) {
      console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
      return { data: null, error: new Error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è') }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (filteredUpdates.name !== undefined) {
      if (!filteredUpdates.name?.trim()) {
        throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      }
      filteredUpdates.name = filteredUpdates.name.trim()
    }

    console.log('üîß –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', filteredUpdates)

    const { data, error } = await supabase
      .from('mount_points')
      .update(filteredUpdates)
      .eq('id', id)
      .select()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –≤ updateMountPoint:', error)
      return { data: null, error }
    }

    console.log('‚úÖ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data?.[0])
    return { data, error: null }
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ updateMountPoint:', err)
    return { data: null, error: err }
  }
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞
 * @param {string} id - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @returns {Promise<{error: Object|null}>}
 */
export async function deleteMountPoint(id) {
  try {
    console.log('üîß deleteMountPoint –≤—ã–∑–≤–∞–Ω –¥–ª—è ID:', id)
    
    if (!id) {
      throw new Error('ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }

    const { error } = await supabase
      .from('mount_points')
      .delete()
      .eq('id', id)
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –≤ deleteMountPoint:', error)
      return { error }
    }

    console.log('‚úÖ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:', id)
    return { error: null }
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ deleteMountPoint:', err)
    return { error: err }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞ –ø–æ ID
 * @param {string} id - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @returns {Promise<Object>} –æ–±—ä–µ–∫—Ç —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @throws {Error} –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
 */
export async function fetchMountPointById(id) {
  try {
    console.log('üîß fetchMountPointById –≤—ã–∑–≤–∞–Ω –¥–ª—è ID:', id)
    
    if (!id) {
      throw new Error('ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }

    const { data, error } = await supabase
      .from('mount_points')
      .select('*')
      .eq('id', id)
      .single()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Supabase –≤ fetchMountPointById:', error)
      throw error
    }

    if (!data) {
      throw new Error('–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    }

    console.log('‚úÖ –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data)
    return data
  } catch (err) {
    console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ fetchMountPointById:', err)
    throw err
  }
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
 * @param {Object} data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @returns {Object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {valid: boolean, error: string|null}
 */
function validateMountPointData(data) {
  if (!data) {
    return { valid: false, error: '–î–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' }
  }

  if (!data.event_id) {
    return { valid: false, error: 'Event ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
  }

  if (!data.name || !data.name.trim()) {
    return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }
  }

  if (data.name.trim().length > 120) {
    return { valid: false, error: '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 120 —Å–∏–º–≤–æ–ª–æ–≤' }
  }

  return { valid: true, error: null }
} 