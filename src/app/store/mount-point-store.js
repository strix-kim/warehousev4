/**
 * Mount Point Store - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Pinia –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Supabase API –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
 */
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { 
  fetchMountPoints, 
  addMountPoint, 
  updateMountPoint, 
  deleteMountPoint,
  fetchMountPointById 
} from '@/features/mount-points/api/mountPointApi'

export const useMountPointStore = defineStore('mountPoint', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const mountPoints = ref([])
  const initialLoading = ref(false)    // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–µ–ª–µ—Ç–æ–Ω
  const refreshing = ref(false)        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ù–ï —Å–∫—Ä—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
  const error = ref(null)
  const currentMountPoint = ref(null)
  
  // Computed –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (deprecated, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Ä–µ–º—è –º–∏–≥—Ä–∞—Ü–∏–∏)
  const loading = computed(() => initialLoading.value)

  // –ì–µ—Ç—Ç–µ—Ä—ã
  const getMountPointsByEventId = computed(() => {
    return (eventId) => mountPoints.value.filter(mp => String(mp.event_id) === String(eventId))
  })

  const getMountPointById = computed(() => {
    return (id) => mountPoints.value.find(mp => mp.id === id)
  })

  const getMountPointsCount = computed(() => {
    return (eventId) => getMountPointsByEventId.value(eventId).length
  })

  // –î–µ–π—Å—Ç–≤–∏—è
  
  /**
   * üöÄ BEST PRACTICES: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
   * @param {boolean} forceReload - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (–¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
   */
  async function loadMountPointsByEventId(eventId, forceReload = false) {
    const existingData = getMountPointsByEventId.value(eventId)
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    if (!forceReload && existingData.length > 0) {
      return { data: existingData, error: null }
    }

    // üéØ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–∑–¥–µ–ª—è–µ–º initial loading –æ—Ç refreshing
    const isInitial = existingData.length === 0
    const loadingState = isInitial ? initialLoading : refreshing
    
    loadingState.value = true
    error.value = null

    try {
      console.log(isInitial ? 'üÜï [Store] –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞' : 'üîÑ [Store] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞')
      
      const { data, error: apiError } = await fetchMountPoints(eventId)
      
      if (apiError) {
        throw new Error(apiError.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º store: —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
      mountPoints.value = mountPoints.value.filter(mp => mp.event_id !== eventId)
      if (data && data.length > 0) {
        mountPoints.value.push(...data)
      }

      console.log(`‚úÖ [Store] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data?.length || 0} —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞ ${isInitial ? '(–ø–µ—Ä–≤–∏—á–Ω–∞—è)' : '(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)'}`)
      return { data: data || [], error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞'
      console.error(`‚ùå [Store] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –º–æ–Ω—Ç–∞–∂–∞:`, err)
      return { data: [], error: err.message }
    } finally {
      loadingState.value = false
    }
  }

  /**
   * üöÄ BEST PRACTICES: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞ –ø–æ ID
   * @param {string} mountPointId - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
   * @param {boolean} forceReload - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (–¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
   */
  async function loadMountPointById(mountPointId, forceReload = false) {
    const existingData = getMountPointById.value(mountPointId)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (!forceReload && existingData) {
      currentMountPoint.value = existingData
      return { data: existingData, error: null }
    }

    // üéØ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–∑–¥–µ–ª—è–µ–º initial loading –æ—Ç refreshing
    const isInitial = !existingData
    const loadingState = isInitial ? initialLoading : refreshing
    
    loadingState.value = true
    error.value = null

    try {
      console.log(isInitial ? 'üÜï [Store] –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞' : 'üîÑ [Store] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞')
      
      const data = await fetchMountPointById(mountPointId)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      const existingIndex = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (existingIndex >= 0) {
        mountPoints.value[existingIndex] = data
      } else {
        mountPoints.value.push(data)
      }

      currentMountPoint.value = data
      console.log(`‚úÖ [Store] –¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ${isInitial ? '(–ø–µ—Ä–≤–∏—á–Ω–∞—è)' : '(–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)'}`)
      return { data, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞'
      console.error('‚ùå [Store] –û—à–∏–±–∫–∞ loadMountPointById:', err)
      return { data: null, error: err.message }
    } finally {
      loadingState.value = false
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞
   * @param {Object} mountPointData - –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
   */
  async function createMountPoint(mountPointData) {
    loading.value = true
    error.value = null

    try {
      const { data, error: apiError } = await addMountPoint(mountPointData)
      
      if (apiError) {
        throw new Error(apiError.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞')
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ store
      if (data && data[0]) {
        mountPoints.value.push(data[0])
        currentMountPoint.value = data[0]
      }

      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞'
      console.error('‚ùå –û—à–∏–±–∫–∞ createMountPoint:', err)
      return { data: null, error: err.message }
    } finally {
      loading.value = false
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞
   * @param {string} mountPointId - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
   * @param {Object} updates - –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  async function editMountPoint(mountPointId, updates) {
    loading.value = true
    error.value = null

    try {
      const { data, error: apiError } = await updateMountPoint(mountPointId, updates)
      
      if (apiError) {
        throw new Error(apiError.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ store
      const index = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (index >= 0 && data && data[0]) {
        mountPoints.value[index] = data[0]
        if (currentMountPoint.value?.id === mountPointId) {
          currentMountPoint.value = data[0]
        }
      }

      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞'
      console.error('‚ùå –û—à–∏–±–∫–∞ editMountPoint:', err)
      return { data: null, error: err.message }
    } finally {
      loading.value = false
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞
   * @param {string} mountPointId - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
   */
  async function removeMountPoint(mountPointId) {
    loading.value = true
    error.value = null

    try {
      const { error: apiError } = await deleteMountPoint(mountPointId)
      
      if (apiError) {
        throw new Error(apiError.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞')
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ store
      mountPoints.value = mountPoints.value.filter(mp => mp.id !== mountPointId)
      if (currentMountPoint.value?.id === mountPointId) {
        currentMountPoint.value = null
      }

      return { error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞'
      console.error('‚ùå –û—à–∏–±–∫–∞ removeMountPoint:', err)
      return { error: err.message }
    } finally {
      loading.value = false
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å store (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
   */
  function clearStore() {
    mountPoints.value = []
    currentMountPoint.value = null
    error.value = null
    loading.value = false
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫–∏
   */
  function clearError() {
    error.value = null
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
   * @param {string} mountPointId - ID —Ç–æ—á–∫–∏ –º–æ–Ω—Ç–∞–∂–∞
   * @param {string} dutyId - ID —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
   * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('–≤ —Ä–∞–±–æ—Ç–µ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞')
   */
  async function updateTechnicalDutyStatus(mountPointId, dutyId, newStatus) {
    // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading.value = true –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    error.value = null
    try {
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É –º–æ–Ω—Ç–∞–∂–∞
      const mountPoint = getMountPointById.value(mountPointId)
      if (!mountPoint) throw new Error('–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π
      const duties = Array.isArray(mountPoint.technical_duties)
        ? [...mountPoint.technical_duties]
        : []
      const idx = duties.findIndex(d => d.id === dutyId)
      if (idx === -1) throw new Error('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      duties[idx] = { ...duties[idx], status: newStatus }
      // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
      const { data, error: apiError } = await updateMountPoint(mountPointId, { technical_duties: duties })
      if (apiError) throw new Error(apiError.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è')
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º store - –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ technical_duties –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const index = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (index >= 0 && data && data[0]) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ technical_duties, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
        mountPoints.value[index].technical_duties = data[0].technical_duties
        if (currentMountPoint.value?.id === mountPointId) {
          currentMountPoint.value.technical_duties = data[0].technical_duties
        }
      }
      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è'
      console.error('‚ùå –û—à–∏–±–∫–∞ updateTechnicalDutyStatus:', err)
      return { data: null, error: err.message }
    } finally {
      // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º loading.value, —Ç–∞–∫ –∫–∞–∫ –º—ã –µ–≥–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ —Ç–æ—á–∫–µ –º–æ–Ω—Ç–∞–∂–∞
   * @param {string} mountPointId
   * @param {{id?: string, title: string, description?: string, status?: '–≤ —Ä–∞–±–æ—Ç–µ'|'–≤—ã–ø–æ–ª–Ω–µ–Ω–æ'|'–ø—Ä–æ–±–ª–µ–º–∞'}} duty
   */
  async function addTechnicalDuty(mountPointId, duty) {
    loading.value = true
    error.value = null
    try {
      const mp = getMountPointById.value(mountPointId)
      if (!mp) throw new Error('–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      const duties = Array.isArray(mp.technical_duties) ? [...mp.technical_duties] : []
      const newDuty = {
        id: duty?.id || (typeof crypto !== 'undefined' && crypto.randomUUID ? crypto.randomUUID() : String(Date.now())),
        title: String(duty?.title || '').trim(),
        description: String(duty?.description || ''),
        status: duty?.status || '–≤ —Ä–∞–±–æ—Ç–µ'
      }
      if (!newDuty.title) throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      duties.push(newDuty)
      const { data, error: apiError } = await updateMountPoint(mountPointId, { technical_duties: duties })
      if (apiError) throw new Error(apiError.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º store
      const index = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (index >= 0 && data && data[0]) {
        mountPoints.value[index] = data[0]
        if (currentMountPoint.value?.id === mountPointId) {
          currentMountPoint.value = data[0]
        }
      }
      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è'
      console.error('‚ùå –û—à–∏–±–∫–∞ addTechnicalDuty:', err)
      return { data: null, error: err.message }
    } finally {
      loading.value = false
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
   * @param {string} mountPointId
   * @param {string} dutyId
   * @param {{title?: string, description?: string, status?: string}} updates
   */
  async function updateTechnicalDuty(mountPointId, dutyId, updates) {
    loading.value = true
    error.value = null
    try {
      const mp = getMountPointById.value(mountPointId)
      if (!mp) throw new Error('–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      
      const duties = Array.isArray(mp.technical_duties) ? [...mp.technical_duties] : []
      const dutyIndex = duties.findIndex(d => d.id === dutyId)
      if (dutyIndex === -1) throw new Error('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
      duties[dutyIndex] = {
        ...duties[dutyIndex],
        ...updates,
        title: String(updates.title || duties[dutyIndex].title || '').trim(),
        description: String(updates.description || duties[dutyIndex].description || '').trim()
      }
      
      if (!duties[dutyIndex].title) throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
      
      const { data, error: apiError } = await updateMountPoint(mountPointId, { technical_duties: duties })
      if (apiError) throw new Error(apiError.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º store
      const index = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (index >= 0 && data && data[0]) {
        mountPoints.value[index] = data[0]
        if (currentMountPoint.value?.id === mountPointId) {
          currentMountPoint.value = data[0]
        }
      }
      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è'
      console.error('‚ùå –û—à–∏–±–∫–∞ updateTechnicalDuty:', err)
      return { data: null, error: err.message }
    } finally {
      loading.value = false
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ
   * @param {string} mountPointId
   * @param {string} dutyId
   */
  async function deleteTechnicalDuty(mountPointId, dutyId) {
    loading.value = true
    error.value = null
    try {
      const mp = getMountPointById.value(mountPointId)
      if (!mp) throw new Error('–¢–æ—á–∫–∞ –º–æ–Ω—Ç–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      
      const duties = Array.isArray(mp.technical_duties) ? [...mp.technical_duties] : []
      const dutyIndex = duties.findIndex(d => d.id === dutyId)
      if (dutyIndex === -1) throw new Error('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
      
      // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞
      duties.splice(dutyIndex, 1)
      
      const { data, error: apiError } = await updateMountPoint(mountPointId, { technical_duties: duties })
      if (apiError) throw new Error(apiError.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è')
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º store
      const index = mountPoints.value.findIndex(mp => mp.id === mountPointId)
      if (index >= 0 && data && data[0]) {
        mountPoints.value[index] = data[0]
        if (currentMountPoint.value?.id === mountPointId) {
          currentMountPoint.value = data[0]
        }
      }
      return { data: data?.[0] || null, error: null }
    } catch (err) {
      error.value = err.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è'
      console.error('‚ùå –û—à–∏–±–∫–∞ deleteTechnicalDuty:', err)
      return { data: null, error: err.message }
    } finally {
      loading.value = false
    }
  }

    return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–æ–≤—ã–µ - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
    mountPoints,
    initialLoading,
    refreshing,
    error,
    currentMountPoint,
    
    // Deprecated —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    loading, // computed: initialLoading

    // –ì–µ—Ç—Ç–µ—Ä—ã
    getMountPointsByEventId,
    getMountPointById,
    getMountPointsCount,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    loadMountPointsByEventId,
    loadMountPointById,
    createMountPoint,
    editMountPoint,
    removeMountPoint,
    clearStore,
    clearError,
    updateTechnicalDutyStatus,
    addTechnicalDuty,
    updateTechnicalDuty,
    deleteTechnicalDuty
  }
}) 