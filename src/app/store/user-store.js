// user-store.js
// Pinia store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (users)
// –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–∞—è —Ä–æ–ª—å: feature-sliced store, —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç CRUD-–ª–æ–≥–∏–∫—É –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

import { defineStore } from 'pinia'
import {
  fetchUsers,
  fetchUserById,
  fetchUsersByIds,
  addUser,
  updateUser,
  deleteUser
} from '@/features/users/api/userApi'

export const useUserStore = defineStore('user', {
  state: () => ({
    users: [],        // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    loading: false,   // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
    error: null       // –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  }),

  actions: {
    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async loadUsers() {
      this.loading = true
      this.error = null
      try {
        const { data, error } = await fetchUsers()
        if (error) throw error
        this.users = data
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        this.users = []
      } finally {
        this.loading = false
      }
    },

    /**
     * üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤)
     * @param {Array<string>} userIds - –º–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param {boolean} mergeWithExisting - –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å
     */
    async loadUsersByIds(userIds, mergeWithExisting = true) {
      if (!userIds || userIds.length === 0) return

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      const existingIds = new Set(this.users.map(u => u.id))
      const missingIds = userIds.filter(id => !existingIds.has(id))
      
      if (missingIds.length === 0) {
        console.log('üéØ [Store] –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        return
      }

      this.loading = true
      this.error = null
      try {
        console.log(`üéØ [Store] –ó–∞–≥—Ä—É–∂–∞–µ–º ${missingIds.length} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
        const { data, error } = await fetchUsersByIds(missingIds)
        if (error) throw error

        if (mergeWithExisting) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
          const newUsers = data.filter(user => !existingIds.has(user.id))
          this.users.push(...newUsers)
          console.log(`‚úÖ [Store] –î–æ–±–∞–≤–ª–µ–Ω–æ ${newUsers.length} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
        } else {
          // –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
          this.users = data
          console.log(`‚úÖ [Store] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`)
        }
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID'
        console.error('‚ùå [Store] –û—à–∏–±–∫–∞ loadUsersByIds:', e)
      } finally {
        this.loading = false
      }
    },

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
     * @param {string} id
     */
    async getUserById(id) {
      this.loading = true
      this.error = null
      try {
        const { data, error } = await fetchUserById(id)
        if (error) throw error
        return data
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        return null
      } finally {
        this.loading = false
      }
    },

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} user
     */
    async createUser(user) {
      this.loading = true
      this.error = null
      try {
        const { error } = await addUser(user)
        if (error) throw error
        await this.loadUsers()
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        throw e
      } finally {
        this.loading = false
      }
    },

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id
     * @param {Object} updates
     */
    async updateUserById(id, updates) {
      this.loading = true
      this.error = null
      try {
        const { error } = await updateUser(id, updates)
        if (error) throw error
        await this.loadUsers()
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        throw e
      } finally {
        this.loading = false
      }
    },

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {string} id
     */
    async deleteUserById(id) {
      this.loading = true
      this.error = null
      try {
        const { error } = await deleteUser(id)
        if (error) throw error
        await this.loadUsers()
      } catch (e) {
        this.error = e.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        throw e
      } finally {
        this.loading = false
      }
    },

    /**
     * –°–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É
     */
    clearError() {
      this.error = null
    },
  },
}) 